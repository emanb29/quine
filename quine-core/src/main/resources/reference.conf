include "quine-akka-overrides"

akka {
  quine {
# Dispatcher is for reactor-style workloads (most notably, shards): very low resource demand per-task, but very high
# volume of tasks
# As a threadpool with a low number of threads, this will tend to build up a queue of messages, then process it
# in large (`throughput`) batches. This should rarely, if ever, be used for scheduling raw tasks like `Future`s.
    graph-shard-dispatcher {
      type = Dispatcher
      throughput = 100
      executor = "thread-pool-executor"
      thread-pool-executor {
        core-pool-size-min = 2
        core-pool-size-factor = 1.0
        core-pool-size-max = 2
      }
    }

# Blocking IO should be minimized in favor of using reactive APIs, but unavoidable, it should be on this dispatcher.
# As a threadpool with throughput=1, this will tend to build up a queue of work, distributing that work evenly amongst
# a fixed number of threads.
# While this is configured identically to the akka `default-blocking-io-dispatcher` (as of akka 2.6.19), the history
# and documentation around that dispatcher imply that it is intended for akka-internal use, not user code
    persistor-blocking-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"
      thread-pool-executor {
        fixed-pool-size = 16
      }
      throughput = 1
    }

# General-purpose dispatcher: Notably, node message processing is handled by this dispatcher, but it is also suited to
# scheduling general-purpose CPU-based workloads.
# At time of writing (akka 2.6.19), this is a fork-join pool, and will scale its number of threads according to the
# current demand for work.
    node-dispatcher = akka.actor.default-dispatcher

    node-mailbox {
      mailbox-type = "com.thatdot.quine.graph.messaging.NodeActorMailbox"
    }

    shard-mailbox {
      mailbox-type = "com.thatdot.quine.graph.messaging.ShardActorMailbox"
    }
  }
}
