version: 1
title: Planetside 2
contributor: https://github.com/emanb29
summary: Ingest interesting events from Daybreak Games' MMOFPS "PlanetSide 2"
description: |-
  Ingest interesting events from Daybreak Games' MMOFPS "PlanetSide 2", invoking the getJsonLines procedure to lazily fill out unknown data. Requires a service_id parameter
ingestStreams:
  - type: WebsocketSimpleStartupIngest
    wsUrl: wss://push.planetside2.com/streaming?environment=ps2&service-id=s:ps2QuineRecipe
    initMessages:
    # A couple notes: character names are not reused across servers, so we can subscribe to all servers ("worlds") and not worry about namespacing character names
    # Characters can be *renamed*, but this is rare because it costs the player $25
    - |- 
      {
        "service":"event",
        "action":"subscribe",
        "worlds": ["all"],
        "characters":["all"],
        "eventNames":["Death"]
      }
    format:
      type: CypherJson
      query: |-
        WITH * WHERE $that.type = 'serviceMessage'
        CREATE (m:murder) // these are never replayed, so no reason to idFrom
        SET m = COALESCE($that.payload, {})
        WITH id(m) as mId
        MATCH (murder) WHERE id(murder) = mId
        MATCH (victim) WHERE id(victim) = idFrom('character', murder.character_id)
        MATCH (attacker) WHERE id(attacker) = idFrom('character', murder.attacker_character_id)
        SET victim:character, attacker:character, 
          victim.character_id = murder.character_id, attacker.character_id = murder.attacker_character_id
        CREATE (victim)<-[:victim]-(murder)-[:attacker]->(attacker)
standingQueries:
  - pattern:
      type: Cypher
      # match each new character-label node
      query: MATCH (newCharacter:character) WHERE exists(newCharacter.character_id) RETURN DISTINCT id(newCharacter) AS id
    outputs:
      populate-fresh-character:
        type: CypherQuery
        query: |-
          MATCH (c)
          WHERE id(c) = $that.data.id
          CALL loadJsonLines("https://census.daybreakgames.com/s:ps2QuineRecipe/get/ps2:v2/character/?character_id="+c.character_id) YIELD value
          SET c += COALESCE(value.character_list[0], {}) // there is always a "character_list" with exactly 1 value: the character we queried
          RETURN value, properties(c)
        andThen:
          type: PrintToStandardOut
          logMode: FastSampling
  # TODO monitor for trades
nodeAppearances: []
quickQueries: []
sampleQueries: []
